import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:google_mlkit_face_detection/google_mlkit_face_detection.dart';
import 'package:http/http.dart' as http;
import 'package:image/image.dart' as img;
import 'package:presensi_karyawan/services/face_detection_service.dart';
import 'package:presensi_karyawan/services/tflite_service.dart';

class AttendanceScreen extends StatefulWidget {
  @override
  _AttendanceScreenState createState() => _AttendanceScreenState();
}

class _AttendanceScreenState extends State<AttendanceScreen> {
  late CameraController _cameraController;
  late FaceDetectionService _faceDetectionService;
  late TFLiteService _tfliteService;
  bool _isProcessing = false;

  @override
  void initState() {
    super.initState();
    _initializeCamera();
    _faceDetectionService = FaceDetectionService();
    _tfliteService = TFLiteService();
    _loadModel();
  }

  Future<void> _loadModel() async {
    await _tfliteService.loadModel();
  }

  Future<void> _initializeCamera() async {
    final cameras = await availableCameras();
    final camera = cameras.first;

    _cameraController = CameraController(
      camera,
      ResolutionPreset.high,
      enableAudio: false,
    );

    await _cameraController.initialize();
    setState(() {});
  }

  Future<void> _processFrame() async {
    if (_isProcessing) return;
    _isProcessing = true;

    try {
      final image = await _cameraController.takePicture();
      final inputImage = InputImage.fromFilePath(image.path);

      // Deteksi wajah
      final faces = await _faceDetectionService.detectFaces(inputImage);

      if (faces.isNotEmpty) {
        // Ambil data wajah pertama
        final face = faces.first;

        // Ekstrak face embeddings menggunakan TFLite
        final faceVector = await _extractFaceVector(image.path, face.boundingBox);

        // Kirim ke API Laravel
        final result = await _sendAttendance(faceVector);

        // Tampilkan hasil
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(result['message'])),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("No face detected.")),
        );
      }
    } catch (e) {
      print("Error processing frame: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error: $e")),
      );
    } finally {
      _isProcessing = false;
    }
  }

  Future<List<double>> _extractFaceVector(
      String imagePath, Rect boundingBox) async {
    try {
      final image = img.decodeImage(await File(imagePath).readAsBytes())!;

      // Crop dan resize area wajah ke ukuran FaceNet (160x160)
      final croppedFace = img.copyCrop(
        image,
        x: boundingBox.left.toInt(),
        y: boundingBox.top.toInt(),
        width: boundingBox.width.toInt(),
        height: boundingBox.height.toInt(),
      );
      final resizedFace = img.copyResize(croppedFace, width: 160, height: 160);

      // Konversi ke format yang dibutuhkan oleh TFLite
      final inputTensor = _processImageToTensor(resizedFace);

      // Gunakan model TFLite untuk menghasilkan embeddings
      final embeddings = await _tfliteService.predict(inputTensor);

      return embeddings;
    } catch (e) {
      print("Error extracting face vector: $e");
      return [];
    }
  }

  Float32List _processImageToTensor(img.Image image) {
    // Pastikan ukuran gambar sesuai dengan model (160x160)
    assert(image.width == 160 && image.height == 160);

    // Buat array float32 untuk menyimpan tensor input
    final Float32List input = Float32List(image.width * image.height * 3);
    int index = 0;

    // Loop melalui setiap piksel
    for (int y = 0; y < image.height; y++) {
      for (int x = 0; x < image.width; x++) {
        // Ambil objek Pixel dari gambar
        final pixel = image.getPixel(x, y);

        // Ekstrak channel warna (R, G, B)
        final red = pixel.r.toDouble();
        final green = pixel.g.toDouble();
        final blue = pixel.b.toDouble();

        // Normalisasi nilai RGB ke range [-1, 1]
        input[index++] = (red - 127.5) / 128.0;
        input[index++] = (green - 127.5) / 128.0;
        input[index++] = (blue - 127.5) / 128.0;
      }
    }

    return input;
  }

  Future<Map<String, dynamic>> _sendAttendance(List<double> faceVector) async {
    final url = 'http://192.168.1.40:8000/api/check-face-match';
    final response = await http.post(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
      },
      body: json.encode({
        'id_karyawan': 2, // ID karyawan, sesuaikan dengan login user
        'face_vector': '[0.0104081891477108,0.013237414881587029,-0.08136162161827087,0.03703692555427551,-0.005835318472236395,0.09873086214065552,-0.02493107132613659,0.06667080521583557,-0.036469943821430206,-0.02634572796523571,-0.01645713858306408,0.07746423035860062,0.029789434745907784,-0.03657428175210953,-0.0085121039301157,-0.02543743886053562,0.01909426972270012,0.03340081870555878,-0.011352123692631721,-0.12970870733261108,-0.09350711852312088,-0.0018639619229361415,0.07484038919210434,-0.042993590235710144,0.0325121209025383,-0.015243752859532833,-0.01608278788626194,-0.04873962327837944,-0.04360046610236168,0.021087709814310074,-0.009434771724045277,-0.00025411337264813483,0.0020878866780549288,-0.023676978424191475,-0.03761332109570503,0.0606655590236187,0.04307505488395691,-0.017913391813635826,-0.1165703609585762,0.026334770023822784,0.012897681444883347,0.038998596370220184,-0.009756611660122871,-0.02284097485244274,0.039400506764650345,0.007235300727188587,0.03982000797986984,0.08939080685377121,-0.10278584808111191,-0.08190129697322845,-0.005155889317393303,0.004255896899849176,0.03345906734466553,-0.03787759691476822,-0.07769361883401871,0.08435163646936417,-0.007827107794582844,0.05853547155857086,-0.007625631522387266,-0.020323434844613075,-0.025976181030273438,0.07670609652996063,-0.049249373376369476,-0.044579584151506424,-0.0437781997025013,0.04477919265627861,0.028382256627082825,0.009303893893957138,0.022276239469647408,-0.002125337952747941,0.04751859977841377,0.039474766701459885,-0.03065565973520279,-0.012844576500356197,0.06253226101398468,-0.0905168354511261,-0.07595560699701309,0.021961288526654243,0.010190646164119244,0.013368985615670681,0.025338081642985344,0.015282326377928257,0.019933952018618584,-0.02042214944958687,-0.036449238657951355,0.03220731392502785,-0.03190302848815918,0.043166182935237885,-0.02819809503853321,-0.021223362535238266,0.01791529171168804,0.01536477915942669,0.01880396157503128,-0.10797517001628876,0.07504641264677048,0.008601200766861439,0.0055060312151908875,-0.01679743081331253,-0.062304604798555374,0.08146605640649796,0.039866093546152115,-0.020953616127371788,-0.010753892362117767,0.02047119289636612,-0.00978913065046072,0.07288427650928497,0.007776573766022921,-0.0537942536175251,-0.033269111067056656,-0.05037907138466835,0.06638967245817184,0.03993382677435875,-0.026618072763085365,-0.027624627575278282,0.04077349975705147,0.016173142939805984,0.08068756014108658,-0.01293314341455698,-0.012131228111684322,0.03933993726968765,-0.0743294283747673,-0.004488973878324032,0.027565831318497658,-0.039139263331890106,-0.017667215317487717,-0.048752304166555405,-0.00025871855905279517,0.030334828421473503,-0.007489807438105345,-0.09785608947277069,0.01670602522790432,-0.04266882687807083,0.05625580623745918,-0.05933452397584915,-0.059132277965545654,0.05082877725362778,0.006111797410994768,-0.006556777749210596,0.0701320692896843,0.04071228951215744,-0.0425228476524353,-0.010780040174722672,-0.02305900864303112,0.025156203657388687,0.06842406094074249,-0.04825695976614952,-0.029293732717633247,-0.0023248656652867794,0.031767841428518295,0.013576083816587925,0.007137690205127001,-0.08066705614328384,-0.07067697495222092,0.01661655120551586,0.10268589109182358,-0.00209125317633152,0.06502438336610794,0.011464176699519157,0.015154738910496235,-0.014572703279554844,0.07182098180055618,0.05762831121683121,-0.023765189573168755,-0.004239119589328766,0.03363003581762314,0.04071591794490814,-0.05690841004252434,-0.005112325306981802,-0.08319972455501556,0.04388270899653435,-0.07648925483226776,0.03498556837439537,0.010708150453865528,0.016263902187347412,0.03276493400335312,0.02081429958343506,0.0957544595003128,-0.023456841707229614,-0.08972762525081635,-0.0017234961269423366,-0.03329874202609062,-0.031007198616862297,0.003757958998903632,0.06935586035251617,0.05732131004333496,0.03073754906654358,0.038263238966464996,0.05703683942556381,0.10621490329504013,0.03894913196563721,-0.01740621216595173,-0.03507034853100777,0.09989523142576218,-0.03281271457672119,0.03233287110924721,0.010845270939171314,0.08627650141716003,0.02622208185493946,-0.018284983932971954,0.013640488497912884,-0.015507186762988567,-0.07035034149885178,0.028047289699316025,-0.045143865048885345,0.020998571068048477,0.002959980396553874,-0.015371410176157951,0.009023255668580532,0.021780801936984062,0.03699465095996857,-0.05230376869440079,0.018187949433922768,-0.008482149802148342,0.00036675544106401503,0.007830856367945671,0.05154764652252197,-0.034985970705747604,-0.009867624379694462,-0.018249263986945152,-0.02171912044286728,-0.06343290954828262,-0.05411018431186676,-0.04202847555279732,-0.03892805799841881,-0.010742618702352047,0.013601415790617466,-0.044515460729599,-0.027275973930954933,-0.04027517884969711,0.01641092635691166,-0.00020648600184358656,0.10993151366710663,-0.011415363289415836,-0.07487130910158157,0.002685872372239828,0.005996087100356817,0.028589598834514618,-0.036507632583379745,0.028149472549557686,-0.062000103294849396,-0.027999471873044968,0.0018150887917727232,0.013314749114215374,-0.04292801767587662,0.05794212594628334,0.02327391877770424,0.03906896710395813,0.0005563540034927428,-0.01500529982149601,0.033332936465740204,0.029127435758709908,0.025720208883285522,0.0251372829079628,0.021521907299757004,0.038833629339933395,-0.009518508799374104,0.04066496714949608,0.010574450716376305,0.03042822703719139,0.1080576479434967,0.03682219237089157,0.01693386770784855,0.003959606867283583,-0.03161809593439102,-0.060412146151065826,-0.02399960160255432,0.008174357004463673,0.007604279089719057,-0.02339080721139908,-0.019708242267370224,-0.08914845436811447,0.012944545596837997,-0.02154853381216526,-0.0810515508055687,-0.0431927815079689,-0.08368731290102005,0.03393961116671562,-0.026188235729932785,0.04679787531495094,-0.026598386466503143,0.0641191378235817,0.041999563574790955,-0.041406918317079544,-0.06859932094812393,-0.04696890711784363,0.012483482249081135,0.031087499111890793,-0.005564509425312281,-0.045339323580265045,-0.07350991666316986,0.018606074154376984,-0.061881884932518005,0.021389272063970566,0.04643136262893677,-0.02634519524872303,-0.004840095993131399,0.031693167984485626,0.08043726533651352,0.02954014576971531,0.03243128955364227,0.05271007493138313,-0.02095000445842743,0.02812630869448185,-0.01793825626373291,0.034766197204589844,-0.021162893623113632,-0.017379028722643852,-0.07631567865610123,-0.011608853004872799,0.0432259701192379,-0.022192664444446564,0.005033139139413834,0.004035289864987135,0.03472911939024925,0.06191649287939072,0.016041608527302742,-0.05030957981944084,0.004266089294105768,-0.05003845691680908,0.018432550132274628,0.11613056063652039,-0.03634392097592354,-0.06263705343008041,0.05282767862081528,0.00045023643178865314,0.017674637958407402,0.03396432474255562,0.008053331635892391,0.06605729460716248,0.060753412544727325,0.04234769195318222,0.051576465368270874,-0.00931581761687994,0.028219766914844513,-0.038078103214502335,0.012744607403874397,0.01690996065735817,0.04688240960240364,0.054268546402454376,0.037291694432497025,0.008238404057919979,-0.057695478200912476,0.0397314690053463,0.03494434431195259,-0.027332404628396034,-0.03529350459575653,0.03712812811136246,0.03918422386050224,0.05873319134116173,-0.020707786083221436,-0.00678258528932929,0.06693548709154129,-0.011685018427670002,-0.05163821205496788,-0.022357651963829994,0.005826293025165796,0.06845463067293167,-0.0031047025695443153,0.002503026043996215,-0.0381917767226696,0.016420284286141396,-0.026022901758551598,-0.10900179296731949,-0.060050174593925476,-0.05386268347501755,0.08354394137859344,0.05585470050573349,-0.006085215136408806,-0.010652325116097927,0.007203280460089445,-0.038557834923267365,-0.05305757373571396,0.030102582648396492,0.011230544187128544,0.03880320489406586,0.04452565312385559,0.014123771339654922,-0.010584537871181965,-0.0022392882965505123,-0.029802249744534492,-0.06335709244012833,-0.06096111238002777,-0.02708778716623783,0.005158569663763046,-0.01814206689596176,-0.036532435566186905,-0.0018215856980532408,-0.09578948467969894,0.020339976996183395,-0.04047893360257149,-0.0026269606314599514,0.04371517896652222,0.0017524288268759847,-0.01424081064760685,-0.02865287847816944,0.04336465150117874,0.06855161488056183,0.03305668756365776,0.056657951325178146,0.07913655042648315,-0.08981529623270035,0.082173191010952,-0.032797954976558685,0.04776439070701599,0.003538424614816904,-0.018066318705677986,-0.006906397640705109,-0.019187308847904205,0.05436352267861366,0.01941610500216484,0.025936925783753395,-0.041989199817180634,0.017606332898139954,0.0005218517617322505,-0.0281106848269701,0.018546590581536293,0.056929320096969604,0.04134250432252884,0.03567462041974068,-0.06569386273622513,-0.00625575752928853,0.03439889848232269,-0.03694572672247887,0.03384236991405487,-0.025292426347732544,-0.0043771639466285706,0.031770579516887665,0.0015431544743478298,0.019572190940380096,-0.021642616018652916,-0.03911181539297104,0.050123926252126694,-0.011567053385078907,-0.06087121367454529,-0.0674838200211525,-0.019097667187452316,-0.008418752811849117,0.033715032041072845,-0.04026589170098305,-0.04141217842698097,-0.028389032930135727,0.0010789762018248439,0.022551340982317924,0.05591020733118057,0.024798322468996048,0.0035743091721087694,-0.06720580905675888,0.003204546868801117,-0.03601856529712677,-0.08615412563085556,-0.009569250978529453,0.019910527393221855,0.016228390857577324,-0.09184432774782181,-0.01647554337978363,-0.024580540135502815,0.06263615190982819,0.10901104658842087,0.07901512086391449,-0.009737097658216953,-0.022694943472743034,0.062187597155570984,-0.007810741197317839,-0.018316764384508133,0.06310395896434784,0.002598148537799716,-0.05865831673145294,0.034031953662633896,0.023467283695936203,0.018240373581647873,0.03590625897049904,-0.0279647558927536,0.016646116971969604,0.012794977985322475,-0.0824330747127533,-0.08398497104644775,0.05899681895971298,-0.030841313302516937,0.06375285983085632,0.08883433789014816,0.014220894314348698,-0.02518327534198761,0.016431109979748726,-0.013942322693765163,0.032978229224681854,0.06379567831754684,-0.07093974947929382,-0.040965013206005096,0.06580603122711182,-0.005368597339838743,-0.03036879189312458,-0.01663707010447979,-0.05986298248171806,-0.049453116953372955,0.06478864699602127,-0.06469406187534332,0.009589742869138718,0.008389693684875965,0.027677251026034355,0.02428564243018627,-0.06574244052171707,-0.03945193812251091,0.027059826999902725,0.009594152681529522,-0.05865003913640976,0.05221125856041908,0.03755849599838257,0.0552055798470974,0.0339876152575016,-0.04853713884949684,-0.03471284359693527,-0.027918048202991486]'

,
      }),
    );

    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("Failed to record attendance: ${response.body}");
    }
  }

  @override
  void dispose() {
    _cameraController.dispose();
    _faceDetectionService.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Attendance")),
      body: _cameraController.value.isInitialized
          ? CameraPreview(_cameraController)
          : Center(child: CircularProgressIndicator()),
      floatingActionButton: FloatingActionButton(
        onPressed: _processFrame,
        child: Icon(Icons.camera),
      ),
    );
  }
}